module AppConfigFor
  # Base class for all errors generated by AppConfigFor
  class Error < StandardError; end

  # Raised when the configuration could not be found.
  class ConfigNotFound < Error

    # The full path of every place the configuration file was looked for.
    attr_reader :locations_searched
    # The underlying SystemCallError that signaled the missing file.
    # Most commonly this will be +Errno::ENOENT+.
    attr_reader :original_exception

    def initialize(locations, original_exception)
      @locations_searched = Array(locations).map { |x| Pathname(x).expand_path }
      @original_exception = original_exception
      super "Could not locate configuration at: #{@locations_searched.join(' or ')}"
    end
  end

  # Raised when there was an issue parsing the configuration file.
  class LoadError < Error

    # The file that was being parsed.
    attr_reader :file
    # The original exception that signaled the parsing problme.
    # Most commonly this will be a +Psych::SyntaxError+
    attr_reader :original_exception

    def initialize(file, original_exception)
      @file = Pathname(file).expand_path
      @original_exception = original_exception
      super "Could not load configuration file: #{@file}\n#{@original_exception.message}"
    end
  end

  # Raised when an attempting to utilize an unrecognized inheritance style.
  class InvalidEnvInheritanceStyle < Error

    # The inheritance style that was attempted to be used.
    attr_reader :attempted
    # List of valid styles at the time of the attempt.
    attr_reader :valid

    def initialize(attempted)
      @attempted = attempted
      @valid = EnvInheritanceStyles.dup
      super "Invalid inheritance style #{@attempted.inspect}. Please use one of the following: #{@valid.map(&:inspect).join(', ')}"
    end

  end

end
